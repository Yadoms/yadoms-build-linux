language: cpp

#limit to git depth to 1 because don't use any git command in this script
git:
  depth: 1
  
before_install:
# deps
- echo 'Installing some dependencies'
- sudo apt-get install libbz2-dev python-dev libudev-dev

#make dir
- mkdir -p $HOME/depsBuild
- mkdir -p $HOME/logs

#CMake
- echo 'Installing CMake 3.7.2'
- sudo apt-get remove cmake
- if [ ${GENERATE_CMAKE} != true ]; then wget  -U 'Yadoms/1.0.0' ${YADOMS_DOWNLOAD_URL}/cmake-3.7.2-build.tar.bz2; else wget --no-check-certificate https://cmake.org/files/v3.7/cmake-3.7.2.tar.gz; fi
- if [ ${GENERATE_CMAKE} != true ]; then tar jxf cmake-3.7.2-build.tar.bz2; else tar zxf cmake-3.7.2.tar.gz; fi
- cd cmake-3.7.2
- if [ ${GENERATE_CMAKE} != true ]; then echo "Bypass CMake/bootstrap" ; else ./bootstrap > $HOME/logs/yadoms_cmake.log; fi
- if [ ${GENERATE_CMAKE} != true ]; then echo "Bypass CMake/make"; else make > $HOME/logs/yadoms_cmake.log; fi
- sudo make install > $HOME/logs/yadoms_cmake.log
- cd ..
- if [ ${GENERATE_CMAKE} = true ]; then tar cjf cmake-3.7.2-build.tar.bz2 cmake-3.7.2; fi
- if [ ${GENERATE_CMAKE} = true ]; then curl --ftp-create-dirs -T cmake-3.7.2-build.tar.bz2 -u $FTP_USER:$FTP_PASSWORD ${YADOMS_UPLOAD_URL}; fi
- if [ ${GENERATE_CMAKE} = true ]; then rm -f cmake-3.7.2-build.tar.bz2; fi

# boost
- echo 'Building Boost 1.63.0'
- if [ ${GENERATE_BOOST} != true ]; then wget -U 'Yadoms/1.0.0' ${YADOMS_DOWNLOAD_URL}/boost_1_63_0-build.tar.bz2; else wget http://netcologne.dl.sourceforge.net/project/boost/boost/1.63.0/boost_1_63_0.tar.bz2; fi
- if [ ${GENERATE_BOOST} != true ]; then tar xjf boost_1_63_0-build.tar.bz2; else tar xjf boost_1_63_0.tar.bz2; fi
- cd boost_1_63_0
- if [ ${GENERATE_BOOST} != true ]; then echo "Bypass boost/bootstrap"; else ./bootstrap.sh > $HOME/logs/yadoms_boost.log; fi
- if [ ${GENERATE_BOOST} != true ]; then echo "Bypass boost/b2"; else ./b2 --with-atomic --with-chrono --with-date_time --with-filesystem --with-regex --with-thread --with-system link=static runtime-link=static cxxflags=-fPIC > $HOME/logs/yadoms_boost.log; fi
- cd ..
- if [ ${GENERATE_BOOST} = true ]; then tar cjf boost_1_63_0-build.tar.bz2 boost_1_63_0; fi
- if [ ${GENERATE_BOOST} = true ]; then curl --ftp-create-dirs -T boost_1_63_0-build.tar.bz2 -u $FTP_USER:$FTP_PASSWORD ${YADOMS_UPLOAD_URL}; fi
- if [ ${GENERATE_BOOST} = true ]; then rm -f boost_1_63_0-build.tar.bz2; fi
  
 # openssl
- echo 'Building OpenSSL'
- if [ ${GENERATE_OPENSSL} != true ]; then wget -U 'Yadoms/1.0.0' ${YADOMS_DOWNLOAD_URL}/openssl-1.0.2k-build.tar.bz2; else wget https://www.openssl.org/source/openssl-1.0.2k.tar.gz; fi
- if [ ${GENERATE_OPENSSL} != true ]; then tar xjf openssl-1.0.2k-build.tar.bz2; else tar xzf openssl-1.0.2k.tar.gz; fi
- cd openssl-1.0.2k
- if [ ${GENERATE_OPENSSL} != true ]; then echo "Bypass OpenSSL/configure"; else ./config --prefix=$HOME/depsBuild/openssl > $HOME/logs/yadoms_openssl.log; fi
- if [ ${GENERATE_OPENSSL} != true ]; then echo "Bypass OpenSSL/make"; else make > $HOME/logs/yadoms_openssl.log; fi
- make install > $HOME/logs/yadoms_openssl.log
- cd ..
- if [ ${GENERATE_OPENSSL} = true ]; then tar cjf openssl-1.0.2k-build.tar.bz2 openssl-1.0.2k; fi
- if [ ${GENERATE_OPENSSL} = true ]; then curl --ftp-create-dirs -T openssl-1.0.2k-build.tar.bz2 -u $FTP_USER:$FTP_PASSWORD ${YADOMS_UPLOAD_URL}; fi
- if [ ${GENERATE_OPENSSL} = true ]; then rm -f openssl-1.0.2k-build.tar.bz2; fi

# poco
- echo 'Building Poco 1.7.7-all'
- if [ ${GENERATE_POCO} != true ]; then wget -U 'Yadoms/1.0.0' ${YADOMS_DOWNLOAD_URL}/poco-1.7.7-all-build.tar.bz2; else wget http://pocoproject.org/releases/poco-1.7.7/poco-1.7.7-all.tar.gz; fi
- if [ ${GENERATE_POCO} != true ]; then tar xjf poco-1.7.7-all-build.tar.bz2; else tar xzf poco-1.7.7-all.tar.gz; fi
- sudo apt-get install libssl-dev libgnutls-dev libopencv-gpu-dev > $HOME/logs/yadoms_poco.log
- cd poco-1.7.7-all/
- if [ ${GENERATE_POCO} != true ]; then echo "Bypass poco/configure_config_file"; else echo 'STATICOPT_CC = -fPIC' >> build/config/Linux; fi
- if [ ${GENERATE_POCO} != true ]; then echo "Bypass poco/configure_config_file"; else echo 'STATICOPT_CXX = -fPIC' >> build/config/Linux; fi
- if [ ${GENERATE_POCO} != true ]; then echo "Bypass poco/configure"; else ./configure --static --config=Linux --no-samples --no-tests --omit=CppUnit,CppUnit/WinTestRunner,Data,Data/SQLite,Data/ODBCData/MySQL,MongoDB,PageCompiler,PageCompiler/File2Page --include-path=$HOME/depsBuild/openssl/include --library-path=$HOME/depsBuild/openssl/lib> $HOME/logs/yadoms_poco.log; fi
- if [ ${GENERATE_POCO} != true ]; then echo "Bypass poco/make"; else make > $HOME/logs/yadoms_poco.log; fi
- cd ..
- if [ ${GENERATE_POCO} = true ]; then tar cjf poco-1.7.7-all-build.tar.bz2 poco-1.7.7-all; fi
- if [ ${GENERATE_POCO} = true ]; then curl --ftp-create-dirs -T poco-1.7.7-all-build.tar.bz2 -u $FTP_USER:$FTP_PASSWORD ${YADOMS_UPLOAD_URL}; fi
- if [ ${GENERATE_POCO} = true ]; then rm -f poco-1.7.7-all-build.tar.bz2; fi


# protobuf
- echo 'Building Protobuf 3.2.0'
- if [ ${GENERATE_PROTOBUF} != true ]; then wget -U 'Yadoms/1.0.0' ${YADOMS_DOWNLOAD_URL}/protobuf-3.2.0-build.tar.bz2; else wget https://github.com/google/protobuf/releases/download/v3.2.0/protobuf-cpp-3.2.0.tar.gz; fi
- if [ ${GENERATE_PROTOBUF} != true ]; then tar xjf protobuf-3.2.0-build.tar.bz2 -C $HOME/depsBuild; else tar xzf protobuf-cpp-3.2.0.tar.gz; fi
- if [ ${GENERATE_PROTOBUF} != true ]; then echo "Bypass protobuf/cd"; else cd protobuf-3.2.0; fi
- if [ ${GENERATE_PROTOBUF} != true ]; then echo "Bypass protobuf/autogen"; else ./autogen.sh > $HOME/logs/yadoms_protobuf_pi.log; fi
- if [ ${GENERATE_PROTOBUF} != true ]; then echo "Bypass protobuf/configure"; else ./configure --enable-shared=no --prefix=$HOME/depsBuild/protobuf --with-pic > $HOME/logs/yadoms_protobuf_pi.log; fi
- if [ ${GENERATE_PROTOBUF} != true ]; then echo "Bypass protobuf/make"; else make > $HOME/logs/yadoms_protobuf_pi.log; fi
- if [ ${GENERATE_PROTOBUF} != true ]; then echo "Bypass protobuf/make install"; else make install > $HOME/logs/yadoms_protobuf_pi.log; fi
- if [ ${GENERATE_PROTOBUF} != true ]; then echo "Bypass protobuf/cd.."; else cd ..; fi
- if [ ${GENERATE_PROTOBUF} = true ]; then tar cjf protobuf-3.2.0-build.tar.bz2 -C $HOME/depsBuild protobuf; fi
- if [ ${GENERATE_PROTOBUF} = true ]; then curl --ftp-create-dirs -T protobuf-3.2.0-build.tar.bz2 -u $FTP_USER:$FTP_PASSWORD ${YADOMS_UPLOAD_URL}; fi
- if [ ${GENERATE_PROTOBUF} = true ]; then rm -f protobuf-3.2.0-build.tar.bz2; fi

# gammu
- echo 'Building Gammu 1.38.1'
- sudo apt-get install python-dev pkg-config libmysqlclient-dev libpq-dev libcurl4-gnutls-dev libusb-1.0-0-dev libdbi0-dev libbluetooth-dev libgudev-1.0-dev libglib2.0-dev unixodbc-dev
- if [ ${GENERATE_GAMMU} != true ]; then wget -U 'Mozilla/5.0' http://yadoms.com/travis_build/static/gammu-1.38.1-build.tar.bz2; else wget http://dl.cihar.com/gammu/releases/gammu-1.38.1.tar.gz; fi
- if [ ${GENERATE_GAMMU} != true ]; then tar xjf gammu-1.38.1-build.tar.bz2; else tar zxf gammu-1.38.1.tar.gz; fi
- cd gammu-1.38.1
- if [ ${GENERATE_GAMMU} != true ]; then echo "Bypass mkdir build"; else mkdir build; fi
- if [ ${GENERATE_GAMMU} != true ]; then echo "Bypass cd build"; else cd build; fi
- if [ ${GENERATE_GAMMU} != true ]; then echo "Bypass cmake"; else cmake -DBUILD_SHARED_LIBS=OFF .. > yadoms_gammu.log; fi
- if [ ${GENERATE_GAMMU} != true ]; then echo "Bypass make"; else make > yadoms_gammu.log; fi
- if [ ${GENERATE_GAMMU} != true ]; then echo "Bypass cd .."; else cd ..; fi
- cd ..
- if [ ${GENERATE_GAMMU} = true ]; then tar cjf gammu-1.38.1-build.tar.bz2 gammu-1.38.1; fi
- if [ ${GENERATE_GAMMU} = true ]; then curl --ftp-create-dirs -T gammu-1.38.1-build.tar.bz2 -u $FTP_USER:$FTP_PASSWORD ${YADOMS_UPLOAD_URL}; fi
- if [ ${GENERATE_GAMMU} = true ]; then rm -f gammu-1.38.1-build.tar.bz2; fi

# PCRE
- echo 'Installing PRCE'
- sudo apt-get install libpcre3 libpcre3-dev

 # SWIG
- echo 'Building SWIG'
- if [ ${GENERATE_SWIG} != true ]; then wget -U 'Yadoms/1.0.0' ${YADOMS_DOWNLOAD_URL}/swig-3.0.12-build.tar.bz2; else wget http://prdownloads.sourceforge.net/swig/swig-3.0.12.tar.gz; fi
- if [ ${GENERATE_SWIG} != true ]; then tar xjf swig-3.0.12-build.tar.bz2; else tar xzf swig-3.0.12.tar.gz; fi
- cd swig-3.0.12
- if [ ${GENERATE_SWIG} != true ]; then echo "Bypass SWIG/configure"; else ./configure > $HOME/logs/yadoms_swig.log; fi
- if [ ${GENERATE_SWIG} != true ]; then echo "Bypass SWIG/make"; else make > $HOME/logs/yadoms_swig.log; fi
- sudo make install > $HOME/logs/yadoms_swig.log
- cd ..
- if [ ${GENERATE_SWIG} = true ]; then tar cjf swig-3.0.12-build.tar.bz2 swig-3.0.12; fi
- if [ ${GENERATE_SWIG} = true ]; then curl --ftp-create-dirs -T swig-3.0.12-build.tar.bz2 -u $FTP_USER:$FTP_PASSWORD ${YADOMS_UPLOAD_URL}; fi
- if [ ${GENERATE_SWIG} = true ]; then rm -f swig-3.0.12-build.tar.bz2; fi

# Python
- sudo apt-get install python-dev
- echo 'Building Python'
- if [ ${GENERATE_PYTHON} != true ]; then wget -U 'Yadoms/1.0.0' ${YADOMS_DOWNLOAD_URL}/Python-2.7.13-build.tar.bz2; else wget https://www.python.org/ftp/python/2.7.13/Python-2.7.13.tgz; fi
- if [ ${GENERATE_PYTHON} != true ]; then tar xjf Python-2.7.13-build.tar.bz2; else tar xzf Python-2.7.13.tgz; fi
- cd Python-2.7.13
- if [ ${GENERATE_PYTHON} != true ]; then echo "Bypass PYTHON/configure"; else ./configure > $HOME/logs/yadoms_python.log; fi
- if [ ${GENERATE_PYTHON} != true ]; then echo "Bypass PYTHON/make"; else make > $HOME/logs/yadoms_python.log; fi
- sudo make install > $HOME/logs/yadoms_python.log
- cd ..
- if [ ${GENERATE_PYTHON} = true ]; then tar cjf Python-2.7.13-build.tar.bz2 Python-2.7.13; fi
- if [ ${GENERATE_PYTHON} = true ]; then curl --ftp-create-dirs -T Python-2.7.13-build.tar.bz2 -u $FTP_USER:$FTP_PASSWORD ${YADOMS_UPLOAD_URL}; fi
- if [ ${GENERATE_PYTHON} = true ]; then rm -f Python-2.7.13-build.tar.bz2; fi
- sudo rm -Rf Python-2.7.13

# PostgreSQL
- echo 'Building PostgreSQL'
- if [ ${GENERATE_POSTGRESQL} != true ]; then wget -U 'Yadoms/1.0.0' ${YADOMS_DOWNLOAD_URL}/postgresql-9.6.2-build.tar.bz2; else wget https://ftp.postgresql.org/pub/source/v9.6.2/postgresql-9.6.2.tar.bz2; fi
- if [ ${GENERATE_POSTGRESQL} != true ]; then tar xjf postgresql-9.6.2-build.tar.bz2; else tar xjf postgresql-9.6.2.tar.bz2; fi
- cd postgresql-9.6.2
- if [ ${GENERATE_POSTGRESQL} != true ]; then echo "Bypass PostgreSQL/configure"; else ./configure > $HOME/logs/yadoms_postgresql.log; fi
- cd src/interfaces/libpq
- if [ ${GENERATE_POSTGRESQL} != true ]; then echo "Bypass PostgreSQL/make"; else make > $HOME/logs/yadoms_postgresql.log; fi
- cd ../../../..
- if [ ${GENERATE_POSTGRESQL} = true ]; then tar cjf postgresql-9.6.2-build.tar.bz2 postgresql-9.6.2; fi
- if [ ${GENERATE_POSTGRESQL} = true ]; then curl --ftp-create-dirs -T postgresql-9.6.2-build.tar.bz2 -u $FTP_USER:$FTP_PASSWORD ${YADOMS_UPLOAD_URL}; fi
- if [ ${GENERATE_POSTGRESQL} = true ]; then rm -f postgresql-9.6.2-build.tar.bz2; fi

#Yadoms sources
- echo 'Downloading yadoms sources'
- git clone --depth=1 -b ${BUILD_BRANCH} git://github.com/Yadoms/yadoms.git 


script:
# Yadoms configuration file
- cd yadoms
- echo 'Configuring Yadoms CMakeListsUserConfig.txt'
#- cp sources/CMakeListsUserConfig.sample.txt sources/CMakeListsUserConfig.txt 
- echo 'set(BOOST_ROOT "'$PWD'/../boost_1_63_0")' > sources/CMakeListsUserConfig.txt
- echo 'set(POCO_ROOT "'$PWD'/../poco-1.7.7-all")' >> sources/CMakeListsUserConfig.txt
- echo 'set(PROTOBUF_ROOT "'$HOME'/depsBuild/protobuf")' >> sources/CMakeListsUserConfig.txt
- echo 'set(PROTOBUF_PROTOC_EXECUTABLE "'`which protoc`'")' >> sources/CMakeListsUserConfig.txt
- echo 'set(PROTOBUF_INSTALLED_TO_CUSTOM_DIRECTORY ON)' >> sources/CMakeListsUserConfig.txt
- echo 'set(OPENSSL_ROOT "'$HOME'/depsBuild/openssl")' >> sources/CMakeListsUserConfig.txt
- echo 'set(DEBUG_WITH_GCC OFF)' >> sources/CMakeListsUserConfig.txt
- echo 'set(PYTHON_USE_PKGCONFIG OFF)' >> sources/CMakeListsUserConfig.txt
- echo 'set(PYTHON_USE_SOURCES ON)' >> sources/CMakeListsUserConfig.txt
- echo 'set(PYTHON_ROOT "'$PWD'/../Python-2.7.13")' >> sources/CMakeListsUserConfig.txt
- echo 'set(PYTHON_LIBRARIES "${PYTHON_ROOT}/libpython2.7.so")' >> sources/CMakeListsUserConfig.txt
- echo 'set(PYTHON_INCLUDE_DIRS ' >> sources/CMakeListsUserConfig.txt
- echo '       ${PYTHON_ROOT}' >> sources/CMakeListsUserConfig.txt
- echo '       ${PYTHON_ROOT}/Include)' >> sources/CMakeListsUserConfig.txt
- echo 'set(PostgreSQL_ROOT ' >> sources/CMakeListsUserConfig.txt
- echo '       "'$PWD'/../postgresql-9.6.2/src/interfaces/libpq"' >> sources/CMakeListsUserConfig.txt
- echo '       "'$PWD'/../postgresql-9.6.2/src/include")' >> sources/CMakeListsUserConfig.txt
- echo 'SET(COTIRE_USE ON)' >> sources/CMakeListsUserConfig.txt
- echo 'SET(COTIRE_USE_UNITY ON)' >> sources/CMakeListsUserConfig.txt

- echo 'set(GAMMU_ROOT "'$PWD'/../gammu-1.38.1")' >> sources/CMakeListsUserConfig.txt
- echo 'set(SWIG_ROOT "'$PWD'/../swig-3.0.12")' >> sources/CMakeListsUserConfig.txt
- echo 'Result:'
- cat sources/CMakeListsUserConfig.txt

# Yadoms
- echo 'Generating makefile'
- sh cmake_linux.sh r
- cd projects
- echo 'Building Yadoms'
- make all_unity
- cd ..

# Make Package => should not be executed if "make all_unity" is done before; 
- cd projects
- echo 'Building Yadoms Package'
- make package/fast
- cd ..

after_failure:  # this will of course run only on failure
# Package logs
- echo 'Package logs'
- cd $HOME
- tar cjf logs.`cat sources/server/Version.h | grep YadomsVersion | cut -d'"' -f2`.tar.bz2 logs
- curl --ftp-create-dirs -T logs.`cat sources/server/Version.h | grep YadomsVersion | cut -d'"' -f2`.tar.bz2 -u $FTP_USER:$FTP_PASSWORD ${YADOMS_UPLOAD_URL}

after_success: # and this only on success
# Package binaries
- echo 'Package binaries'

# copy config file
- cp config/yadoms.ini builds

#remove gitignore file
- rm -f builds/.gitignore

#rename folder and package it
- mv builds yadoms-linux-` cat sources/server/Version.h | grep YadomsVersion | cut -d'"' -f2`
- tar cjf yadoms-linux-`cat sources/server/Version.h | grep YadomsVersion | cut -d'"' -f2`.${TRAVIS_COMMIT}.tar.bz2 yadoms-linux-`cat sources/server/Version.h | grep YadomsVersion | cut -d'"' -f2`
- curl --ftp-create-dirs -T yadoms-linux-`cat sources/server/Version.h | grep YadomsVersion | cut -d'"' -f2`.${TRAVIS_COMMIT}.tar.bz2 -u $FTP_USER:$FTP_PASSWORD ${YADOMS_UPLOAD_URL}


